#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable

#include "definition.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT tlas;
layout(binding = 1, set = 0, rgba8) uniform image2D image; 
layout(binding = 0, set = 1) uniform Camera {
    mat4 viewInverse;
    mat4 projInverse;
} cam;

layout(location = ColorPayloadIndex) rayPayloadEXT ColorPayload color_payload;

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec3 origin = (cam.viewInverse * vec4(0, 0, 0, 1)).xyz;
    vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1);
    vec3 direction = (cam.viewInverse * vec4(normalize(target.xyz), 0)).xyz;

    float tmin = 0.001;
    float tmax = 10000.0;

    color_payload.depth = 0;
    color_payload.curr_ior = 1.0; // air ior
    color_payload.color = vec3(0, 0, 0);

    traceRayEXT(
        tlas, 
        gl_RayFlagsOpaqueEXT, 
        0xFF, 
        0, 
        0, 
        0, 
        origin.xyz, 
        tmin, 
        direction.xyz, 
        tmax, 
        ColorPayloadIndex
    );

    vec3 color = color_payload.color;
    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0 / 2.2));
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}